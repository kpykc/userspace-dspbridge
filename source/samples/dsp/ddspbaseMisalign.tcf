/*
 *  Copyright 2001-2008 Texas Instruments - http://www.ti.com/
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 *  ======== ddspbaseMisalign.tcf ========
 *
 */

utils.importFile("bridgeutils.tci");

var chipType = environment["config.chipType"];
if (chipType == undefined) {
    chipType = prog.build.cfgArgs.chipType;
}

/* load the platform */
bridgeutils.loadPlatform("innovator" + chipType + "_bridge");

load(utils.findFile('assert.tci'));	 // load assert support

utils.importFile("ddspbase.tci");

// if (chipType == "24xx") {
//     bridge.PWRM.IDLEDOMAINS = false;
//     bridge.PWRM.ENABLE = false;
// }

if (chipType == "24xx") {
    // Configure some channels
    bridge.DMAN24XX.DMANIRQ = 1;
    bridge.DMAN24XX.NUMCHANNELS = 2;
    bridge.DMAN24XX_CH0.enabled = true;
    bridge.DMAN24XX_CH1.enabled = true;
}

/* Board dependent properties */
if ((chipType == "1510") || (chipType == "24xx")) {
    bridge.DARAM.createHeap = true;
    bridge.DARAM.heapSize = 0x4800;
    bridge.PRD.USECLK = 0;
    bridge.CLK.ENABLECLK = 0;
}

// nd: we don't use that now because of a RTSC issue which should be fixed
//     soon. basically in some cases RTSC will ignore the "tcopts" and thus the
//     power management is not enabled into the base image (see *.tcf)
//if (environment["config.powerManagement"] == 1) {
//if (environment["config.powerManagement"] == 1) {
var bPowerManagement = true ;
if (bPowerManagement) {
    print ("Enabling power management...");
    // disables the Bios timer when using PM since it may prevent
    // the device from going into IDLE
    bridgeutils.enablePowerManagement(prog);
}

/* Set board frequency (MHz) */
bridge.GBL.CLKOUT = 180;

/*
 * Do you want to enable RTDX?  By default, RTDX is disabled.  Toggle the
 * boolean variable to disable/enable RTDX.
 */
var fEnableRTDX = false;

if (fEnableRTDX) {
    bridgeutils.enableRTDX();
}

// check any and all asserts added in the script above
assert.check();

/* generate the configuration files */
prog.gen();
