/*
 *  Copyright 2001-2008 Texas Instruments - http://www.ti.com/
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 *  ======== ddspbase.tcf ========
 *
 */

utils.importFile("bridgeutils.tci");

var chipType = environment["config.chipType"];
if (chipType == undefined) {
    chipType = prog.build.cfgArgs.chipType;
}

if (chipType != "2430" && chipType != "3430") {

var fcPackage = false ;
}
else {
var fcPackage = true ;
}

/* load the platform */
bridgeutils.loadPlatform("innovator" + chipType + "_bridge", fcPackage);

// If FC is outside the bridge, the below configuration is applicable
if ( !fcPackage ) {
bridgeutils.addFcConfig();
}
load(utils.findFile('assert.tci'));	 // load assert support

utils.importFile("ddspbase.tci");


/* Board dependent properties */
if (chipType != "2430" && chipType != "3430") { // C55 devices
    bridge.DARAM.createHeap = true;
    bridge.DARAM.heapSize = 0x4800;

    // disables the Bios timer since it is not used, also when using PM
    // it may prevent the device from going into IDLE
    bridge.PRD.USECLK = false;
    bridge.CLK.ENABLECLK = false;
}

// nd: we don't use that now because of a RTSC issue which should be fixed
// soon. basically in some cases RTSC will ignore the "tcopts" and thus the
// power management is not enabled into the base image (see *.tcf)
// if (environment["config.powerManagement"] == 1) {


var bPowerManagement = true ;
if ((bPowerManagement) && (chipType != "v1030") && (chipType != "v1035") ) {
    print ("Enabling power management...");
    bridgeutils.enablePowerManagement(prog);
}

var bLoadMonitor = true ;
if ((bLoadMonitor) && (chipType != "v1030") && (chipType != "v1035") ) {
    print ("Enabling PWRM Load Monitor...");
    bridge.PWRM.ENABLE  = true ; //APHdebug
    bridgeutils.enablePWRMLoadMonitor(prog);
}

/*
 * Do you want to link in the Bridge debug variant libs?
 */
bridge.BRIDGE.enableDebug = true;

/*
 * Do you want to send print notification to GPP?
 */
bridge.SYS.PUTCFXN = prog.extern("USR_doPutcNotifyGPP");
bridge.SYS.TRACESIZE = 0x2000;

/* Set board frequency (MHz) */
bridge.GBL.CLKOUT = 180;

/*
 * Do you want to enable RTDX?  By default, RTDX is disabled.  Toggle the
 * boolean variable to disable/enable RTDX.
 */
var fEnableRTDX = false;

if (fEnableRTDX) {
    bridgeutils.enableRTDX();
}

// check any and all asserts added in the script above
assert.check();

/* generate the configuration files */
prog.gen();
