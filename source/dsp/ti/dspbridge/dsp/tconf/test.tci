/*
 *  ======== test.tci ========
 */

/*
 *  mod  : module being validated
 *  inst : instance object being validated
 *         null if testing a global property
 *  fxn  : the function to run for the test. If the function exists in the 
 *         module it is called, otherwise we use the one defined here 
 *  prop : the property name to be tested.
 *  arg  : optional arg passed down to the test function
 */
function exec (mod, inst, fxn, prop, arg)
{
    /*
     * label is a text that can be displayed when throwing an error
     * it contains the module name and the property name
     */
    var label = (inst == null) ?
    mod.$$name + "::" + prop :
    mod.$$name + "[" + inst.name + "]::" + prop ;

    var obj = (inst == null) ? mod : inst;
    var val = obj[prop];
           
    dspbridge.print ("Test " + label + " ** " + fxn + " (" + val + ")"
                     + " (" + arg + ")");

    if (typeof(mod[fxn]) == "function") {
        mod[fxn].call(obj, label, val, arg);
    }
    else if (typeof(this[fxn]) == "function") {
        this[fxn].call(obj, label, val, arg);
    }
    else {
        throw ("Unknown test function: " + fxn);
    }
}

function checkType (text, obj, type)
{
    // TMP fix: to be removed when we know why...
    if (obj == undefined) return;

    if (typeof(obj) == dspbridge.$$types[type]) return;

    if ((type == "Boolean") && 
        ((obj == 0) || (obj == 1))) return;

    throw (text + " needs to be of type " + type);
}

function hasHeap (text, obj)
{
    // TODO: improve error handling, use try {} catch to return a more
    //       appropriate comment
    isMemSegment(text, obj);
    if (obj.createHeap == 0) throw (text + " No Heap");
}

function isEven (text, obj)
{
    if (obj%2 != 0) throw (text + " not even");
}

//
// ======== isMemOrNullSegment ========
// Check that obj is a MEM object, including MEM_NULL (eg, dynamic loading
// memory segments may be MEM_NULL)
//
function isMemOrNullSegment (text, obj)
{
    if ((obj != undefined) && (obj.module == prog.module("MEM"))) return;
    throw (text + " Not a Memory segment");
}

//
// ======== isMemDataSegment ========
// Check that obj is any MEM object that the linker may allocate data in
//
function isMemDataSegment (text, obj)
{
    // first check it is a memory segment
    isMemSegment(text, obj);

    if (((obj.space != "code/data") && (obj.space != "data")) ||
        (obj.dynamicLoading == true)) {
        throw (text + " Not a valid Memory segment for data");
    }

    return;    
}

//
// ======== isMemSegment ========
// Check that obj is a MEM object that is not MEM_NULL
//
function isMemSegment (text, obj)
{
    var MEM_NULL = prog.module("MEM").instance("MEM_NULL");
    if (obj == MEM_NULL) throw (text + " must not be MEM_NULL");
    isMemOrNullSegment(text, obj);
}
