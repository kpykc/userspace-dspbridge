/*
 *  ======== monitor.tcf ========
 *
 */

utils.importFile("bridgeutils.tci");

var chipType = environment["config.chipType"];
if (chipType == undefined) {
    chipType = prog.build.cfgArgs.chipType;
}

load(utils.findFile('assert.tci'));	 // load assert support

/* load the platform */
print ("chipType is " + chipType);
bridgeutils.loadPlatform("innovator" + chipType + "_bridge");

// Setting this here since previous default of DATASEG is equal to IRAM
bridge.DYNM.DLLVIEWSEG = bridge.MEM.DATASEG;

/* Board dependent properties */
if (chipType != "2430") {

    // Reduce the size of SARAM to make room for dynamic loading region
    bridge.SARAM.base = 0x8008;
    bridge.SARAM.len = 0x7ff8;

    // Reduce the size of DARAM to make room for dynamic loading region
    bridge.DARAM.base = 0x100;
    bridge.DARAM.len = 0x5F00;
    bridge.DARAM.heapSize = 0x3000;

    bridge.TIOMAP1510SHM.dynSramMemSize = 0x2000;
    bridge.TIOMAP1510SHM.dynSramMemBase = 0x7D000;

    // Create SARAM_DYN for dynamic loading
    saramdyn = bridge.MEM.create("SARAM_DYN");
    saramdyn.createHeap = 0;
    saramdyn.base = 0x10000;
    saramdyn.len = 0x3800;
    saramdyn.space = "code/data";
    saramdyn.dynamicLoading = true;

    // Create DARAM_DYN for dynamic loading
    daramdyn = bridge.MEM.create("DARAM_DYN");
    daramdyn.createHeap = 0;
    daramdyn.base = 0x6000;
    daramdyn.len = 0x2000;
    daramdyn.space = "code/data";
    daramdyn.dynamicLoading = true;

    // Map dynamic loading memory regions to abstract types
    bridge.PROC.DYNDARAMSEG = daramdyn;
    bridge.PROC.DYNSARAMSEG = saramdyn;

}

// Map dynamic loading memory regions to abstract types
//bridge.PROC.DYNEXTSEG = bridge.DYNEXTMEM;

/*  Load the THRLOAD module configuration file  */
if ((chipType == "24xx") || (chipType == "2430")) {
    bridgeutils.enableQOS(prog);
}

/*
 * Do you want to link in the Bridge debug variant libs?
 */
bridge.BRIDGE.enableDebug = false;

/* Set board frequency (MHz) */
bridge.GBL.CLKOUT = 180;

// add instance LOG.trace
trace = bridge.LOG.create("trace");
trace.bufLen = 32;

// check any and all asserts added in the script above
assert.check();

/* generate the configuration files */
prog.gen("qostest");
