/*
 *  ======== Doff.tcf ========
 *  Input:
 *    - Input Bridge node TCONF script (if needed)
 *    - Input Bridge dependent library chart (if needed)
 *    - Output directory pathname
 *    - Output filename for list of generated assembly files
 *    - Output filename for list of tconf dependencies
 *
 *    -Dconfig.userTcf=...
 *    -Dconfig.userChart=...
 *    -Dconfig.outDir=...
 *    -Dconfig.genFileList=...
 *    -Dconfig.depFileList=...
 */

var i = 0;
var args = arguments;

var userTcf         = environment["config.userTcf"];
var userOutDir      = environment["config.outDir"];
var userChart       = environment["config.userChart"];
var userGenFileList = environment["config.genFileList"];
var userDepFileList = environment["config.depFileList"];

var arguments = {};
var gblDoff = { outFiles: "" };
var userIsa = "55"; /* default */

if (userOutDir != undefined) {
    /* Remove any preceeding dot-slash to keep TCONF from crashing */
    userOutDir = userOutDir.replace('./',"") + "/";
} else {
    userOutDir = "";
}

/* Process Bridge script, if provided */
if (userTcf != undefined) {
    userTcf = userTcf.replace('./',"");
    /*
     * If tcf is in a subdir, extract name only
     * Note: lastIndexOf() returns position of '/' if found, else -1.
     * In both cases, advance by one
     */
    var idx = userTcf.lastIndexOf('/') + 1;

    /* Set program name to produce named generated files in outdir */
    var prgName = userOutDir + userTcf.substring(idx, userTcf.indexOf('.'));

    environment["config.programName"] = prgName;

    /* Import Bridge script */
    utils.importFile(userTcf);

    /* Update list of generated files */
    var xmlFile = prgName + "cfg.xml";

    var xml = new XML(readFile(xmlFile));

    /* Find out what ISA this is */
    if (xml.BRIDGE.C64P == "true") {
        userIsa = "62";
    }

    gblDoff.outFiles += xmlFile + "," + prgName + "cfg.cmd," + prgName +
                        "cfg.h," + prgName + "cfg.h" + userIsa + "," +
                        prgName + "cfg.s" + userIsa + ",";

    /* Setup argument chain for asmgen according to what we're given */
    arguments[i++] = "-x";
    arguments[i++] = xmlFile;
}

/* Process chart information, if provided */
if (userChart != undefined) {
    arguments[i++] = "-da";
    arguments[i++] = userChart;
}

if (userIsa != undefined) {
    arguments[i++] = "-isa";
    arguments[i++] = userIsa;
}

arguments.length = i;

/* Generate assembly files, if any */
utils.importFile("asmgen.tcf");

/* Store list of generated files */
if (userGenFileList != undefined) {
    if (gblDoff.outFiles != "") {
        var file;
        file = new java.io.FileWriter(userOutDir + userGenFileList);
        file.write(gblDoff.outFiles);
        file.close();
    }
}

/* Store list of tconf dependencies */
if (userDepFileList != undefined) {
    if (utils.loadedFiles != "") {
        file = new java.io.FileWriter(userOutDir + userDepFileList);

        for (i in utils.loadedFiles) {
            file.write(utils.loadedFiles[i] + ",");
        }
        file.close();
    }
}

function readFile (fileName)
{
    var ins = new java.io.BufferedReader(new java.io.FileReader(fileName));
    var outs = new java.io.StringWriter();
    var nextLine;
    while ((nextLine = ins.readLine()) != null) {
        outs.write(nextLine);
        outs.write("\n");
    }
    outs.flush();
    return (outs.toString());
}

