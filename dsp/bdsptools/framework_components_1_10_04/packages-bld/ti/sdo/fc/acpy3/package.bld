/* 
 *  Copyright 2007
 *  Texas Instruments Incorporated
 *
 *  All rights reserved.  Property of Texas Instruments Incorporated
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 * 
 */
/*
 *  ======== package.bld ========
 *    Build script for acpy package.
 *
 */

var LIBBASE = "acpy3";

// These COPTS match those in acpy3.pjt, except -o2 is not put in
// release version.
var COPTS = "-mv6400+";
//COPTS += " -ms2"; // added per AC but it raises ticks in combination with -o3
COPTS += " -o3";    // added per AC but it raises ticks!
COPTS += " -ml3";   // removed per AC but it does lower ticks!
//COPTS += " --no_compress --disable:sploop";  // removed per AC but no effect on ticks
//COPTS += " -mt";  // added per AC as a test but it raises ticks
COPTS += " -os";    // added per EG: informational only
COPTS += " -mw";    // added per EG: informational only
COPTS += " --perf_info";    // added per EG: temporary

var c64Files = [
                "acpy3_start", 
                "acpy3_configure",
                "acpy3_complete", 
                "acpy3_fastconfigure16b",
                "acpy3_fastconfigure32b",
                "acpy3_fastsetfinal",
                "acpy3_init", 
                "acpy3_qdma",
                "acpy3",
                "acpy3_start_cpucopy",
                "acpy3_wait", 
                "acpy3_waitlinked", 
                "acpy3_wait_cpucopy", 
                "acpy3_setfinal"
];

// Need to build two different acpy libraries for each Bridge profile,
// one that uses CPU to copy, and one that uses DMA to copy.
var acpy3Profiles = {
    "dma" : {
        compileOpts : {
            copts: " ",             // nothing yet
            defs: " ",              // nothing yet
            aopts: " ",             // nothing yet
        },
        libBase : LIBBASE,
    },
    "cpu" : {
        compileOpts : {
            copts: " ",             // nothing yet
            defs: " -D_ACPY3_CPUCOPY_ ",
            aopts: " ",             // nothing yet
        },
        libBase : LIBBASE + "cpu",
    }
};



objectFiles = {
    "C64P"      : c64Files,
};


/* This package uses the headers package and the dman package. */
Pkg.uses = [
    "ti/bios/include",
    "ti/sdo/fc/utils",
];

/* The source package release */
srcRelease = Pkg.addRelease(Pkg.name.replace(/\./g, '_') + ",src");
srcRelease.attrs.label = "source";
srcRelease.attrs.exportSrc = true;
srcRelease.otherFiles = ["acpy3_qdma.h", "acpy3_util.h"];

/* The build package release */
bldRelease = Pkg.addRelease(Pkg.name.replace(/\./g, '_') + ",bld");
bldRelease.attrs.label = "build";
bldRelease.attrs.exportSrc = true;
bldRelease.otherFiles = [
    "acpy3_qdma.h", 
    "acpy3_util.h", 
    "package.bld",
    "acpy3.pjt",
];

/* Default package release */ 
Pkg.otherFiles = [
    "acpy3.h",
    "acpy3_fastconfigure16b.h",
    "acpy3_fastconfigure32b.h",
    "acpy3_fastsetfinal.h",
    "acpy3_setfinal.h", 
    "acpy3_start.h", 
    "acpy3_wait.h", 
    "acpy3_qdma.h", 
    "acpy3_util.h", 
];

/* loop over all targets */
for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];
    var plat = targ.platform;   /* use the target's default platform */

    if (objectFiles[targ.name] != null) {
        print("building for target " + targ.name + " ...");

        // loop over all acopy3 library profiles
        for (var prof in acpy3Profiles) {
            var libBase = acpy3Profiles[prof].libBase;
            var compileOpts = acpy3Profiles[prof].compileOpts;

            /* loop over all "bridge" profiles */
            for (var profName in targ.profiles) {
                if (profName.search(/^bridge_/) >= 0) {

                    print("Adding library " + libBase + profTail[profName]);

                    if (profName.search(/release/) >= 0) {
                        compileOpts.copts += " -o3 ";
                    }
                    var profCOpts = targ.profiles[profName].compileOpts.copts;
                    var profDefs = targ.profiles[profName].compileOpts.defs;

                    //print("profile copts: " + profCOpts);
                    //print("profile defs: " + profDefs);
                    print("Profile: " + profName + " copts: " + compileOpts.copts);

                    var lib = Pkg.addLibrary(libBase + profTail[profName],
                            targ, {
                                copts: COPTS + compileOpts.copts + profCOpts,
                                aopts: compileOpts.aopts,
                                defs: compileOpts.defs + " " + profDefs,
                                profile: profName,
                                releases : [srcRelease, bldRelease],
                            });
                    lib.addObjects(objectFiles[targ.name]);
                }
            }
        }
    }
}

/*
 *  @(#) ti.sdo.fc.acpy3; 1, 0, 0,66; 5-10-2007 10:49:19; /db/atree/library/trees/fc-b12x/src/
 */

