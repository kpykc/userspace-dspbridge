;  ======== mgs3/dma_omap.h55 ========
;
; This file contains the hardware
; definitions and structure defines for the dma device.
;
;

;==============================================================================
;defines and macros
;------------------------------------------------------------------------------

;/d============================================================================
;/d defines
;/d----------------------------------------------------------------------------

DMA_ChBase                      .set    0xc00
DMA0_STATUS_REG                 .set    0xc03
DMA1_STATUS_REG                 .set    0xc23
DMA2_STATUS_REG                 .set    0xc43
DMA3_STATUS_REG                 .set    0xc63
DMA4_STATUS_REG                 .set    0xc83
DMA5_STATUS_REG                 .set    0xca3

_DMA_QUEUEEMPTY                 .set    0x0     
DARAMSIZE                       .set    0x10000
SARAMSIZE                       .set    0x18000
SDRAMTOP                        .set    0xfffffe


ILLEGALPORTVAL                  .set    0xffff

;srcport
CSDP_SRCDARAM                   .set    0x4
CSDP_SRCSARAM                   .set    0x0
CSDP_SRCEMIF                    .set    0x8

;dstport
CSDP_DSTDARAM                   .set    0x200
CSDP_DSTSARAM                   .set    0x0
CSDP_DSTEMIF                    .set    0x400

CSDP_SRCDSTPKBEN_ENA            .set    0xa140  ;
CCR_CHENABL                     .set    0x80    ; Channel Enable

;channel num * 2
CH0                             .set    0
CH1                             .set    2
CH2                             .set    4
CH3                             .set    6
CH4                             .set    8
CH5                             .set    10


;/d============================================================================
;/d structures
;/d----------------------------------------------------------------------------


;**********************************************
; _DMA_Job structure
_DMA_Job                .struct

cnt                     .int    ; size of transfer in params.elemSize units
src                     .long   ; Source address
dst                     .long   ; destination address
handle                  .long   ; algorithm DMA object
nextJob                 .long   ; (_DMA_Job*) next struct in job queue (last points to first)

_DMA_JobSize            .endstruct

;**********************************************
; _DMA_QueueObj structure
_DMA_QueueObj           .struct

curHandle               .long   ; Points to the current hdl being processed
reqPending              .int    ; Number of outstanding reqs to be serviced
len                     .int    ; size of the queue
readPtr                 .long   ; current read pointer
writePtr                .long   ; current write pointer
channelNum              .int    ; channel number for this queue
cbFxn                   .long   ; callback function for reserved channel ISR 
cbArg                   .long   ; callback function argument for reserved channel ISR 
endPad                  .align 2 ; make size even

_DMA_QueueObjSize       .endstruct

;**********************************************
; IDMA2_Obj structure
IDMA2_Obj               .struct

numJobs                 .int    ; Number of outstanding jobs
jobQueue                .long   ; logical channel - physical channel mapping
channel                 .int    ; Physical channel to use
csdp                    .int    ; Channel source/dest param register value
ccr                     .int    ; Channel control register value
cfn                     .int    ; Channel Frame number register value
csei                    .int    ; Channel source element index register value
csfi                    .int    ; Channel source frame index register value
cdei                    .int    ; Channel dest element index register value
cdfi                    .int    ; Channel dest frame index register value
ccr2                    .int    ; Channel endianism register value
cbFxn                   .long   ; Callback function pointer for 
                                ; notification of completed DMA transfer
cbArg                   .long   ; Argument to be passed to callback function
prevHandle              .long   ; (IDMA2_Handle) pointer to prev handle (NULL if first in chain)
nextHandle              .long   ; (IDMA2_Handle) pointer to next handle (NULL if last in chain)
IDMA2_ObjSize           .endstruct

;**********************************************
; DDMA_ChanRegs structure

DDMA_ChanRegs           .struct

CSDP                    .int    ; source and destination parameters register
CCR                     .int    ; channel control register
CICR                    .int    ; interrupt control register
C_SR                    .int    ; status register
CSSA_L                  .int    ; source start address (low part)
CSSA_H                  .int    ; source start address (high part)
CDSA_L                  .int    ; destination start address (low part)
CDSA_H                  .int    ; destination start address (high part)
CEN                     .int    ; element number register 
CFN                     .int    ; frame number register
CSFI                    .int    ; Source frame index register 
CSEI                    .int    ; Source element index register
CSACO                   .int    ; Source Address Counter
CDACO                   .int    ; Destination Address Counter
CDEI                    .int    ; Destination frame index register
CDFI                    .int    ; Destination element index register
RSVD1                   .int    ; Not Used
RSVD2                   .int    ; Not Used
CCR2                    .int    ; Endiansim register

DDMA_ChanRegsSize       .endstruct
;**********************************************

