/* 
 *  Copyright 2007
 *  Texas Instruments Incorporated
 *
 *  All rights reserved.  Property of Texas Instruments Incorporated
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 * 
 */

/*
 *  ======== package.bld ========
 *    Build script for dman3 package.
 *
 */

/* if true send DBG_printf to SYS_printf (default is to LOG) */
var fSendDBGtoSYS = true;
var COPTS = "" ;
if (fSendDBGtoSYS) {
    COPTS += " -D_DBG_WITH_SYS_";
}

var LIBBASE = "dman3";

var c64Files = ["dman3", "dman3_initImpl", "dman3_init", "dman3_initparms", 
                "dman3_api", "rmm"];
/* 
 * List of objects to be included for RTSC based consumers of FC/DMAN3.
 * This is the same list as above, except for the exclusion of dman3_init.
 * DMAN3 module supplies the DMAN3_init by synthesizing the function based on 
 * module configuration using a template.
 */
var c64FilesCfg = ["dman3", "dman3_initImpl", "dman3_initparms", "dman3_api", "rmm"];

objectFiles = {
    "C64P"      : c64Files,
};


// Need to build three different  dman3 libraries for each Bridge profile,
// one that uses CPU to copy, and one that uses DMA to copy.
// The third one, "xdcConfigurable", is supplied to applications consuming and
// configuring DMAN3 as a RTSC package.
var dman3Profiles = {
    "dma" : {
        compileOpts : {
            copts: " ",             // nothing yet
            defs: " ",              // nothing yet
            aopts: " ",             // nothing yet
        },
        objFiles : c64Files,
        libBase : LIBBASE,
    },
    "xdcConfigurable" : {
        compileOpts : {
            copts: " ",             // nothing yet
            defs: " ",              // nothing yet
            aopts: " ",             // nothing yet
        },
        objFiles : c64FilesCfg,
        libBase : LIBBASE + "Cfg",
    },
    "cpu" : {
        compileOpts : {
            copts: " ",             // nothing yet
            defs: " -D_DMAN3_CPUCOPY_ ",
            aopts: " ",             // nothing yet
        },
        objFiles : c64Files,
        libBase : LIBBASE + "cpu",
    }
};

Pkg.uses = 
    [
     "ti/bios/include",
     "ti/sdo/fc/utils",
     ];

/* The source package release */
srcRelease = Pkg.addRelease(Pkg.name.replace(/\./g, '_') + ",src");
srcRelease.attrs.label = "source";
srcRelease.attrs.exportSrc = true;
srcRelease.otherFiles = ["dman3_impl.h", "rmm.h"];

/* The build package release */
bldRelease = Pkg.addRelease(Pkg.name.replace(/\./g, '_') + ",bld");
bldRelease.attrs.label = "build";
bldRelease.attrs.exportSrc = true;
bldRelease.otherFiles = ["dman3_impl.h", "rmm.h", "package.bld", "dman3.pjt"];

Pkg.otherFiles = [
    "dman3.h",
    "DMAN3.link.xdt",
    "examples",
    "dman3.tci",
    "dman3_c.tpl",
    "dman3_cmd.tpl",
];

/* loop over all targets */
for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];
    var plat = targ.platform;   /* use the target's default platform */

    if (objectFiles[targ.name] != null) {
        print("building for target " + targ.name + " ...");

        // loop over all dman3 library profiles
        for (var prof in dman3Profiles) {
            var libBase = dman3Profiles[prof].libBase;
            var compileOpts = dman3Profiles[prof].compileOpts;
            var objFilesInLib = dman3Profiles[prof].objFiles;

            /* loop over all "bridge" profiles */
            for (var profName in targ.profiles) {
                if (profName.search(/^bridge_/) >= 0) {
                    var libName = libBase + profTail[profName];
                    print("Adding library " + libBase + profTail[profName] +
                          " prof:" + prof + "profName: " + profName +
                          " with compileOpts: " + compileOpts);
                    var profCOpts = targ.profiles[profName].compileOpts.copts;
                    var profDefs = targ.profiles[profName].compileOpts.defs;

                    var lib = Pkg.addLibrary(libName,
                            targ, {
                                copts: COPTS + compileOpts.copts + profCOpts,
                                aopts: compileOpts.aopts,
                                defs: compileOpts.defs + " " + profDefs,
                                profile: profName,
                                releases : [srcRelease, bldRelease],
                            });
                    lib.addObjects(objFilesInLib);
               } 
            }
        }
    }
}

/*
 *  @(#) ti.sdo.fc.dman3; 1, 0, 1,66; 5-10-2007 10:49:43; /db/atree/library/trees/fc-b12x/src/
 */

