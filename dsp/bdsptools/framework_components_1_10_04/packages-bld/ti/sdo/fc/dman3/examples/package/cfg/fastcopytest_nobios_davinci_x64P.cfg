function _cfg(prog, verbose) {

    /* initialize prog attrs from build model */
    var build = {
        releases: {
            $name:"xdc.bld.Executable.Instance#3/attrs/releases",
        },
        target: {
            $name:"ti.targets.C64P",
            module$meta$init: {},
            instance$meta$init: {},
            instance$init: {},
            module$static$init: {},
            instance$static$init: {},
            name: "C64P",
            suffix: "64P",
            isa: "64P",
            model: {
                $name:"ti.targets.C64P/model",
                endian: "little"
            },
            rts: "ti.targets.rts6000",
            base: {
                $name:"ti.targets.C62",
                module$meta$init: {},
                instance$meta$init: {},
                instance$init: {},
                module$static$init: {},
                instance$static$init: {},
                name: "C62",
                suffix: "62",
                isa: "62",
                model: {
                    $name:"ti.targets.C62/model",
                    endian: "little"
                },
                rts: "ti.targets.rts6000",
                platform: "ti.platforms.sim6xxx%3ATMS320C6211",
                platforms: {
                    $name:"ti.targets.C62/platforms",
                },
                debugGen: {
                    $name:"ti.targets.C62/debugGen",
                    execTemplate: "ti/targets/ccs_exec.xdt",
                    execPattern: "%24%28cfgDir%29%24%28cfgName%29.pjt",
                    packageTemplate: "ti/targets/ccs_package.xdt",
                    packagePattern: "package/%24%28pkgName%29.pjt"
                },
                extensions: {
                    $name:"ti.targets.C62/extensions",
                    ".s62": {
                        $name:"ti.targets.C62/extensions/'.s62'",
                        suf: ".s62",
                        typ: "asm"
                    },
                    ".asm": {
                        $name:"ti.targets.C62/extensions/'.asm'",
                        suf: ".asm",
                        typ: "asm"
                    },
                    ".c": {
                        $name:"ti.targets.C62/extensions/'.c'",
                        suf: ".c",
                        typ: "c"
                    },
                    ".cpp": {
                        $name:"ti.targets.C62/extensions/'.cpp'",
                        suf: ".cpp",
                        typ: "cpp"
                    },
                    ".cxx": {
                        $name:"ti.targets.C62/extensions/'.cxx'",
                        suf: ".cxx",
                        typ: "cpp"
                    },
                    ".C": {
                        $name:"ti.targets.C62/extensions/'.C'",
                        suf: ".C",
                        typ: "cpp"
                    },
                    ".cc": {
                        $name:"ti.targets.C62/extensions/'.cc'",
                        suf: ".cc",
                        typ: "cpp"
                    }
                },
                versionMap: {
                    $name:"ti.targets.C62/versionMap",
                    "TMS320C6x_4.32": "1%2C0%2C4.32%2C0",
                    "TMS320C55x_2.56": "1%2C0%2C2.56%2C0",
                    "TMS320C54x_3.83": "1%2C0%2C3.83%2C0",
                    "TMS320C2000_3.07": "1%2C0%2C3.07%2C0"
                },
                profiles: {
                    $name:"ti.targets.C62/profiles",
                    debug: {
                        $name:"ti.targets.C62/profiles/'debug'",
                        compileOpts: {
                            $name:"ti.targets.C62/profiles/'debug'/compileOpts",
                            copts: "-g",
                            defs: "-D_DEBUG_%3D1"
                        }
                    },
                    release: {
                        $name:"ti.targets.C62/profiles/'release'",
                        compileOpts: {
                            $name:"ti.targets.C62/profiles/'release'/compileOpts",
                            copts: "-o2"
                        }
                    },
                    profile: {
                        $name:"ti.targets.C62/profiles/'profile'",
                        compileOpts: {
                            $name:"ti.targets.C62/profiles/'profile'/compileOpts",
                            copts: "-gp"
                        }
                    },
                    coverage: {
                        $name:"ti.targets.C62/profiles/'coverage'",
                        compileOpts: {
                            $name:"ti.targets.C62/profiles/'coverage'/compileOpts",
                            copts: "-gp"
                        }
                    },
                    alchemy: {
                        $name:"ti.targets.C62/profiles/'alchemy'",
                        compileOpts: {
                            $name:"ti.targets.C62/profiles/'alchemy'/compileOpts",
                        }
                    }
                },
                sectMap: {
                    $name:"ti.targets.C62/sectMap",
                    ".text": "code",
                    ".stack": "data",
                    ".bss": "data",
                    ".cinit": "data",
                    ".pinit": "data",
                    ".const": "data",
                    ".data": "data",
                    ".switch": "data",
                    ".sysmem": "data",
                    ".far": "data",
                    ".args": "data",
                    ".cio": "data",
                    ".vecs": "code"
                },
                stdTypes: {
                    $name:"ti.targets.C62/stdTypes",
                    t_Arg: {
                        $name:"ti.targets.C62/stdTypes/t_Arg",
                        size: 4,
                        align: 4
                    },
                    t_Char: {
                        $name:"ti.targets.C62/stdTypes/t_Char",
                        size: 1,
                        align: 1
                    },
                    t_Double: {
                        $name:"ti.targets.C62/stdTypes/t_Double",
                        size: 8,
                        align: 8
                    },
                    t_Float: {
                        $name:"ti.targets.C62/stdTypes/t_Float",
                        size: 4,
                        align: 4
                    },
                    t_Fxn: {
                        $name:"ti.targets.C62/stdTypes/t_Fxn",
                        size: 4,
                        align: 4
                    },
                    t_Int: {
                        $name:"ti.targets.C62/stdTypes/t_Int",
                        size: 4,
                        align: 4
                    },
                    t_Int8: {
                        $name:"ti.targets.C62/stdTypes/t_Int8",
                        size: 1,
                        align: 1
                    },
                    t_Int16: {
                        $name:"ti.targets.C62/stdTypes/t_Int16",
                        size: 2,
                        align: 2
                    },
                    t_Int32: {
                        $name:"ti.targets.C62/stdTypes/t_Int32",
                        size: 4,
                        align: 4
                    },
                    t_Int40: {
                        $name:"ti.targets.C62/stdTypes/t_Int40",
                        size: 8,
                        align: 8
                    },
                    t_Int64: {
                        $name:"ti.targets.C62/stdTypes/t_Int64",
                        size: 8,
                        align: 8
                    },
                    t_Long: {
                        $name:"ti.targets.C62/stdTypes/t_Long",
                        size: 8,
                        align: 8
                    },
                    t_LDouble: {
                        $name:"ti.targets.C62/stdTypes/t_LDouble",
                        size: 8,
                        align: 8
                    },
                    t_LLong: {
                        $name:"ti.targets.C62/stdTypes/t_LLong",
                        size: 8,
                        align: 8
                    },
                    t_Ptr: {
                        $name:"ti.targets.C62/stdTypes/t_Ptr",
                        size: 4,
                        align: 4
                    },
                    t_Short: {
                        $name:"ti.targets.C62/stdTypes/t_Short",
                        size: 2,
                        align: 2
                    }
                },
                bitsPerChar: 8,
                scompile: {},
                getVersion: {},
                getISAChain: {}
            },
            platform: "ti.platforms.sim6xxx%3ATMS320CDM420",
            platforms: {
                $name:"ti.targets.C64P/platforms",
            },
            version: "ti.targets.C64P%7B1%2C0%2C6.0%2C7",
            debugGen: {
                $name:"ti.targets.C64P/debugGen",
                execTemplate: "ti/targets/ccs_exec.xdt",
                execPattern: "%24%28cfgDir%29%24%28cfgName%29.pjt",
                packageTemplate: "ti/targets/ccs_package.xdt",
                packagePattern: "package/%24%28pkgName%29.pjt"
            },
            extensions: {
                $name:"ti.targets.C64P/extensions",
                ".s64P": {
                    $name:"ti.targets.C64P/extensions/'.s64P'",
                    suf: ".s64P",
                    typ: "asm"
                },
                ".s64": {
                    $name:"ti.targets.C64P/extensions/'.s64'",
                    suf: ".s64",
                    typ: "asm"
                },
                ".s62": {
                    $name:"ti.targets.C64P/extensions/'.s62'",
                    suf: ".s62",
                    typ: "asm"
                },
                ".asm": {
                    $name:"ti.targets.C64P/extensions/'.asm'",
                    suf: ".asm",
                    typ: "asm"
                },
                ".c": {
                    $name:"ti.targets.C64P/extensions/'.c'",
                    suf: ".c",
                    typ: "c"
                },
                ".cpp": {
                    $name:"ti.targets.C64P/extensions/'.cpp'",
                    suf: ".cpp",
                    typ: "cpp"
                },
                ".cxx": {
                    $name:"ti.targets.C64P/extensions/'.cxx'",
                    suf: ".cxx",
                    typ: "cpp"
                },
                ".C": {
                    $name:"ti.targets.C64P/extensions/'.C'",
                    suf: ".C",
                    typ: "cpp"
                },
                ".cc": {
                    $name:"ti.targets.C64P/extensions/'.cc'",
                    suf: ".cc",
                    typ: "cpp"
                }
            },
            versionMap: {
                $name:"ti.targets.C64P/versionMap",
                "TMS320C6x_4.32": "1%2C0%2C4.32%2C0",
                "TMS320C55x_2.56": "1%2C0%2C2.56%2C0",
                "TMS320C54x_3.83": "1%2C0%2C3.83%2C0",
                "TMS320C2000_3.07": "1%2C0%2C3.07%2C0"
            },
            rootDir: "/db/atree/library/trees/depot/cgt6x-6.0.7",
            profiles: {
                $name:"ti.targets.C64P/profiles",
                debug: {
                    $name:"ti.targets.C64P/profiles/'debug'",
                    compileOpts: {
                        $name:"ti.targets.C64P/profiles/'debug'/compileOpts",
                    },
                    linkOpts: "-i%20/db/rtree/install/trees/products/sabios-h05/product/Linux/bios_5_31/packages/ti/bios/lib"
                },
                release: {
                    $name:"ti.targets.C64P/profiles/'release'",
                    compileOpts: {
                        $name:"ti.targets.C64P/profiles/'release'/compileOpts",
                    },
                    linkOpts: "-i%20/db/rtree/install/trees/products/sabios-h05/product/Linux/bios_5_31/packages/ti/bios/lib"
                },
                profile: {
                    $name:"ti.targets.C64P/profiles/'profile'",
                    compileOpts: {
                        $name:"ti.targets.C64P/profiles/'profile'/compileOpts",
                        copts: "-gp"
                    }
                },
                coverage: {
                    $name:"ti.targets.C64P/profiles/'coverage'",
                    compileOpts: {
                        $name:"ti.targets.C64P/profiles/'coverage'/compileOpts",
                        copts: "-gp"
                    }
                },
                alchemy: {
                    $name:"ti.targets.C64P/profiles/'alchemy'",
                    compileOpts: {
                        $name:"ti.targets.C64P/profiles/'alchemy'/compileOpts",
                    }
                },
                bridge_debug: {
                    $name:"ti.targets.C64P/profiles/'bridge_debug'",
                    compileOpts: {
                        $name:"ti.targets.C64P/profiles/'bridge_debug'/compileOpts",
                        aopts: "-g",
                        copts: "-pdr%20-g%20-pden%20-pds%3D452%20-pds%3D238",
                        defs: "-DIDMA3_USEFULLPACKAGEPATH%20-D_DBG_%20-DDBC_ASSERTS%3D1"
                    },
                    linkOpts: "-i%20/db/rtree/install/trees/products/sabios-h05/product/Linux/bios_5_31/packages/ti/bios/lib"
                },
                bridge_release: {
                    $name:"ti.targets.C64P/profiles/'bridge_release'",
                    compileOpts: {
                        $name:"ti.targets.C64P/profiles/'bridge_release'/compileOpts",
                        copts: "-pdr%20-pden%20-pds%3D452%20-pds%3D238",
                        defs: "-DIDMA3_USEFULLPACKAGEPATH%20-DDBC_ASSERTS%3D0"
                    },
                    linkOpts: "-i%20/db/rtree/install/trees/products/sabios-h05/product/Linux/bios_5_31/packages/ti/bios/lib"
                }
            },
            sectMap: {
                $name:"ti.targets.C64P/sectMap",
                ".text": "code",
                ".stack": "data",
                ".bss": "data",
                ".cinit": "data",
                ".pinit": "data",
                ".const": "data",
                ".data": "data",
                ".switch": "data",
                ".sysmem": "data",
                ".far": "data",
                ".args": "data",
                ".cio": "data",
                ".vecs": "code"
            },
            stdTypes: {
                $name:"ti.targets.C64P/stdTypes",
                t_Arg: {
                    $name:"ti.targets.C64P/stdTypes/t_Arg",
                    size: 4,
                    align: 4
                },
                t_Char: {
                    $name:"ti.targets.C64P/stdTypes/t_Char",
                    size: 1,
                    align: 1
                },
                t_Double: {
                    $name:"ti.targets.C64P/stdTypes/t_Double",
                    size: 8,
                    align: 8
                },
                t_Float: {
                    $name:"ti.targets.C64P/stdTypes/t_Float",
                    size: 4,
                    align: 4
                },
                t_Fxn: {
                    $name:"ti.targets.C64P/stdTypes/t_Fxn",
                    size: 4,
                    align: 4
                },
                t_Int: {
                    $name:"ti.targets.C64P/stdTypes/t_Int",
                    size: 4,
                    align: 4
                },
                t_Int8: {
                    $name:"ti.targets.C64P/stdTypes/t_Int8",
                    size: 1,
                    align: 1
                },
                t_Int16: {
                    $name:"ti.targets.C64P/stdTypes/t_Int16",
                    size: 2,
                    align: 2
                },
                t_Int32: {
                    $name:"ti.targets.C64P/stdTypes/t_Int32",
                    size: 4,
                    align: 4
                },
                t_Int40: {
                    $name:"ti.targets.C64P/stdTypes/t_Int40",
                    size: 8,
                    align: 8
                },
                t_Int64: {
                    $name:"ti.targets.C64P/stdTypes/t_Int64",
                    size: 8,
                    align: 8
                },
                t_Long: {
                    $name:"ti.targets.C64P/stdTypes/t_Long",
                    size: 8,
                    align: 8
                },
                t_LDouble: {
                    $name:"ti.targets.C64P/stdTypes/t_LDouble",
                    size: 8,
                    align: 8
                },
                t_LLong: {
                    $name:"ti.targets.C64P/stdTypes/t_LLong",
                    size: 8,
                    align: 8
                },
                t_Ptr: {
                    $name:"ti.targets.C64P/stdTypes/t_Ptr",
                    size: 4,
                    align: 4
                },
                t_Short: {
                    $name:"ti.targets.C64P/stdTypes/t_Short",
                    size: 2,
                    align: 2
                }
            },
            bitsPerChar: 8,
            scompile: {},
            getVersion: {},
            getISAChain: {}
        },
        test: {
            $name:"xdc.bld.Executable.Instance#3/attrs/test",
        },
        linkTemplate: "fastcopytest_nobios.cmd.xdt",
        copts: "-g%20-pdr%20-pden%20-pds%3D452%20-pds%3D238%20-o3%20-ml3%20--no_compress%20--disable%3Asploop",
        cfgArgs: "%7BchipType%3A%20%22davinci%22%7D",
        aopts: "",
        exportExe: true,
        cfgScript: "fastcopytest.cfg",
        profile: "debug",
        lopts: "-c%20",
        exportSrc: true,
        exportCfg: true,
        defs: "-DDBC_ASSERTS%3D1%20-DIDMA3_USEFULLPACKAGEPATH%20-D_RTS_MODE%20-Dxdc_cfg__xheader__%3D%27%3Cti/sdo/fc/dman3/examples/package/cfg/fastcopytest_nobios_davinci_x64P.h%3E%27%20"
    };
    _runescape(build);
    build.cfgArgs = {chipType: "davinci"};
    prog.build = build;
    prog.name = 'fastcopytest_nobios_davinci.x64P';
    prog.linkTemplate = './fastcopytest_nobios.cmd.xdt';
    prog.endian = prog.build.target.model.endian;

    /* use the platform package's Platform module */
    var Platform = xdc.useModule('ti.platforms.sim6xxx.Platform');
    prog.platformName = 'ti.platforms.sim6xxx:TMS320CDM420';
    var platCfg = {};
    _runescape(platCfg);
    prog.platform = Platform.create('TMS320CDM420', platCfg);

    /* record the executable's package name */
    prog.$$bind('$buildpkg', 'ti.sdo.fc.dman3.examples');
    prog.$$bind('$$isasm', 0);

    /* bind prog to an appropriate execution context */
    prog.cpu = prog.platform.getExeContext(prog);

    /* import the target's run-time support pkg */
    xdc.loadPackage('ti.targets.rts6000');

    /* import the executable's package */
    var home = xdc.loadPackage('ti.sdo.fc.dman3.examples');
    xdc.om.$$bind('$homepkg', home);
    var spath = '.';

    /* load & run program cfg script and monitor all loaded files */
    _runCfg('fastcopytest.cfg', spath, 'package/cfg/fastcopytest_nobios_davinci_x64P', false, false, platCfg);
    var cout = null;

    /* get the exec command for this executable */
    if (prog.execCmd == null) {
        prog.execCmd = prog.platform.getExecCmd(prog, xdc.om['ti.platforms.sim6xxx'].packageBase);
    }
    var cout = 'define EXEC.' + prog.name + '\n\n';
    cout += prog.execCmd;
    cout += '\nendef\n\n';
    utils.genDep('package/cfg/fastcopytest_nobios_davinci_x64P', 'ti.sdo.fc.dman3.examples', utils.loadedFiles, cout,null);

    /* define function to run user's config file */    
    function _runCfg(cfgScript, path, programName, legacyTcf, legacyCfg, platParams) {
        if (legacyTcf) {
            var $save = {prog:utils.global.prog, Program:Program};
            environment["config.programName"] = programName;
            environment["config.platform"] = Program.platformName;
            utils.seedPath = environment["config.importPath"];
            utils.loadPlatform.params = platParams;
            Program = $$legacy.Program;
            utils.importFile(cfgScript, path);
            $$legacy.prog = utils.global.prog;
            utils.global.prog = $save.prog;
            Program = $save.Program;
            if (legacyCfg) {
                utils.importFile(cfgScript.replace(/\.tcf/, ".cfg"), path);
            }
        } else {
            utils.importFile(cfgScript, path);
        }
    }
    
    /* define function to decode _serialized strings */    
    function _runescape(obj) {
        for (var i in obj) {
            if (obj[i] != null) {
                if (typeof obj[i] == "string") {
                    obj[i] = unescape(obj[i]);
                } else {
                    if (typeof obj[i] == "object") {
                        _runescape(obj[i]);
                    }
                }
            }
        }
    }
    
}

/* run configuration script */
_cfg(xdc.om['xdc.cfg.Program'], false);
