/*
 *  Copyright 2001-2008 Texas Instruments - http://www.ti.com/
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 *  ======== scale.tci ========
 *
 */

/* add strmcopy, ping, xdais, wave, and audio nodes */
xdaisNode = bridge.NODE.create("xdaisNode");

xdaisNode.uuid = "D91A01BD_D215_11D4_8626_00105A98CA0B";
xdaisNode.name = "SCALESOCKET_TI";
xdaisNode.nodeType = "XDAISNODE";
xdaisNode.stackSize = 1024;
xdaisNode.stackSeg = 0;
xdaisNode.messageDepth = 4;
xdaisNode.priority = 8;
xdaisNode.numInputStreams = 1;
xdaisNode.numOutputStreams = 1;
xdaisNode.timeout = -1;
xdaisNode.createFxn = "SCALESOCKET_TI_create";
xdaisNode.executeFxn = "SCALESOCKET_TI_execute";
xdaisNode.deleteFxn = "SCALESOCKET_TI_delete";
xdaisNode.algStructName = "SCALE_TI_ISCALE";

if (dynamicNode) {
    xdaisNode.loadType = "Dynamic";
    xdaisNode.splitPhases = splitPhases;

    if (chipType != "2430" && chipType != "3430") {
        if (xdaisNode.splitPhases) {
            xdaisNode.createCodeSeg = bridge.DYN_SARAM;
            xdaisNode.createDataSeg = bridge.DYN_DARAM;
            xdaisNode.executeCodeSeg = bridge.DYN_SARAM;
            xdaisNode.executeDataSeg = bridge.DYN_DARAM;
            xdaisNode.deleteCodeSeg = bridge.DYN_SARAM;
            xdaisNode.deleteDataSeg = bridge.DYN_DARAM;
        } else {
            xdaisNode.createCodeSeg = bridge.DYN_SARAM;
            xdaisNode.createDataSeg = bridge.DYN_DARAM;
        }
    }
}

if (chipType == "2430" || chipType == "3430") {
    /*
     *  Example configuration of heap requirements for different
     *  node profiles.
     */
    xdaisNode.heapSizeProfile0 = 0x100000; /* 1MB */
    xdaisNode.heapSizeProfile1 = 0x200000; /* 2MB */
    xdaisNode.heapSizeProfile2 = 0;
    xdaisNode.heapSizeProfile3 = 0x10000;
}

